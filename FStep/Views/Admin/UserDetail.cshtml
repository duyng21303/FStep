@using FStep.ViewModels
@model ProfileVM
@{
	int rating = (int)(Model.PointRating ?? 0);
	var roles = new List<string> { "Customer", "Moderator", "Administrator" };
	roles = roles.Where(role => !role.Equals(Model.Role, StringComparison.OrdinalIgnoreCase)).ToList();
}
@Html.AntiForgeryToken()
<div class="container bootstrap snippets bootdeys">
	<div class="row" id="user-profile">
		<div class="col-lg-3 col-md-4 col-sm-4">
			<div class="card w-100">
				<div class="card-body text-center">
					<h2>@Model.Name</h2>
					<img src="~/img/userAvar/@Model.AvatarImg" alt="" class="profile-img img-fluid mx-auto d-block rounded-circle">
					<div class="profile-label my-2">
						<span class="badge bg-danger">Vai trò: @Model.Role</span>
					</div>
					<div class="profile-details mb-2">
						<ul class="fa-ul mx-0">
							<li>Đã đăng: <span>@ViewData["TotalPost"]</span></li>
							<li>Đã giao dịch: <span>@ViewData["TotalTransaction"]</span></li>
						</ul>
					</div>

					<div class="profile-details mb-2">
						@if (!User.Claims.FirstOrDefault(c => c.Type == "UserID").Value.Equals(Model.IdUser))
						{
							@* Tính năng khóa
						1. user là Administrator
						2. user là Moderator và người xem chi tiết hiện tại là Customer
						=> thì sẽ hiển thị nút khóa *@
							if (User.IsInRole("Administrator") || (User.IsInRole("Moderator") && Model.Role == "Customer"))
							{
								<button class="btn btn-primary btn-sm btn-lock-unlock" data-status="@Model.Status" data-userid="@Model.IdUser">@(Model.Status == false ? "Mở khóa" : "Khóa")</button>
							}

							@* Tính năng phân quyền
						1. user là Administrator
						=> thì sẽ hiển thị nút phân quyền *@
							if (User.IsInRole("Administrator"))
							{
								<div class="nav-item dropdown mt-2">
									<div class="dropdown">
										<button class="btn btn-info btn-sm dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
											Thay đổi vai trò
										</button>
										<ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
											@foreach (var role in roles)
											{
												<li data-newrole="@role" class="role-selected"><a class="dropdown-item" href="#">@role</a></li>
											}
										</ul>
									</div>
								</div>
							}
						}
					</div>
				</div>
			</div>
		</div>

		<div class="col-lg-9 col-md-8 col-sm-8">
			<div class="card w-100">
				<div class="card-header">
					Chi tiết
				</div>
				<div class="card-body">
					@if (User.IsInRole("Customer"))
					{
						<div class="your-post">
							<div class="container-xl px-4 mt-4">
								<h3>Your Posts</h3>
								<div class="row">
									@foreach (var post in Model.Posts)
									{
										<div class="col-md-6 col-lg-4 col-xl-3 mb-4">
											<!-- Added mb-4 for spacing between rows -->
											<div class="rounded position-relative fruit-item">
												<div class="post-img-wrapper">
													<img src="@Url.Content("~/img/postPic/" + post.Img)" class="img-fluid w-100 rounded-top" alt="Post Image">
													@if (post.Status == "finish")
													{
														<div class="completed-label">
															<span class="badge bg-success">Hoàn thành</span>
														</div>
													}
												</div>
												<div class="p-4 border border-secondary border-top-0 rounded-bottom">
													<h4 class="title">@Html.Raw(post.Title)</h4>
													<div class="description" style="max-height: 40px; overflow: hidden; transition: max-height 0.5s ease;">@Html.Raw(post.Description)</div>
													<p class="text-end mb-0 mt-2">Created on: <span>@Html.Raw(post.CreateDate?.ToString("dd/MM/yyyy"))</span></p>
												</div>
											</div>
										</div>
									}
								</div>
							</div>
						</div>
					}
				</div>
			</div>
		</div>
	</div>
</div>
<script>
	$(document).ready(function () {
		var token = $('input[name="__RequestVerificationToken"]').val();

		$('.btn-lock-unlock').on('click', function () {
			var userid = $(this).data('userid');
			var status = $(this).data('status');
			var message = "Bạn có chắc chắn muốn khóa tài khoản này không";
			if (status == "True") {
				status = true;
			} else {
				var message = "Bạn có chắc chắn muốn mở khóa tài khoản này không";
				status = false;
			}
			Swal.fire({
				title: message,
				showCancelButton: true,
				confirmButtonText: "Có",
				cancelButtonText: "Không"
			}).then((result) => {
				if (result.isConfirmed) {
					fetch('/Admin/LockUnlock', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
							'RequestVerificationToken': token
						},
						body: JSON.stringify({
							IdUser: userid,
							Status: !status
						})
					})
						.then(response => {
							if (!response.ok) {
								throw new Error('Network response was not ok');
							}
							window.location.reload();
						})
						.catch(error => {
							Swal.fire("Đã có lỗi xảy ra", "", "error");
						});

				}
			});
		});

		$('.role-selected').on('click', function () {
			var newRole = $(this).data('newrole');

			Swal.fire({
				title: `Bạn có muốn thay đổi vai trò người dùng @Model.Name từ @Model.Role thành ${newRole}`,
				showCancelButton: true,
				confirmButtonText: "Có",
				cancelButtonText: "Không"
			}).then((result) => {
				if (result.isConfirmed) {
					fetch('/Admin/ChangeRole', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
							'RequestVerificationToken': token
						},
						body: JSON.stringify({
							IdUser: `@Model.IdUser`,
							Role: newRole
						})
					})
					.then(response => {
						if (!response.ok) {
							throw new Error('Network response was not ok');
						}
						window.location.reload();
					})
					.catch(error => {
						Swal.fire("Đã có lỗi xảy ra", "", "error");
					});
				}
			});
		});
	});
</script>



